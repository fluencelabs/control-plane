module Poll declares main

export main

import SpellId from "../types.aqua"
import ChainInfo from "../chain/chain.aqua"
import poll_new_deals from "../chain/new_deals.aqua"
import poll_deal_changes_batch from "../chain/changed_deals.aqua"
import spell_log from "../fluence/spell.aqua"
import get_joined_deals from "../decider/deal_storage.aqua"

use "../chain/blocks.aqua" as Blocks

func main(spell_id: SpellId, chain: ChainInfo):
    -- Get the latest block number from chain
    latest_block <- Blocks.get_latest(spell_id, chain)

    if latest_block != nil:
        -- load deals that are already joined
        -- poll new deals uses it to learn if deal was already joined
        -- poll deal changes retrieves changes for these deals
        joined_deals <- get_joined_deals(spell_id)

        try:
            -- Find new deals and create workers
            poll_new_deals(spell_id, chain, joined_deals, latest_block!)

        -- Update existing deals
        poll_deal_changes_batch(spell_id, chain, joined_deals, latest_block!)
