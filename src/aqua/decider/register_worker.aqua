aqua RegisterWorker declares register_worker, poll_txs

import DealId, SpellId, WorkerId, PAT from "../types.aqua"
import spell_log, deal_log, list_push from "../fluence/spell.aqua"
import ChainConnector, RegisterWorkerResult, WorkerTxInfo from "services.aqua"
import ChainInfo from "../chain/chain.aqua"
import Spell, StringListValue from "@fluencelabs/spell/spell_service.aqua"
import Array from "@fluencelabs/aqua-lib/math.aqua"
import Json from "../fluence/peer.aqua"
import store_tx_failed_deal from "./deal_storage.aqua"
import TXS_KEY, TXS_STATUS_KEY from "./consts.aqua"

alias TxHash: string

service JsonWorkerTxInfo("json"):
    parse(str: string) -> WorkerTxInfo

func store_tx(spell_id: SpellId, tx_info: WorkerTxInfo):
    list_push(spell_id, TXS_KEY, tx_info)

func remove_tx(spell_id: SpellId, tx_info: WorkerTxInfo):
    Spell spell_id
    str <- Json.stringify(tx_info)
    Spell.list_remove_value(TXS_KEY, str)

data WorkerTxStatus:
    tx_info: WorkerTxInfo
    status: string

service JsonWorkerTxStatus("json"):
    parse(str: string) -> WorkerTxStatus

func store_tx_status(spell_id: SpellId, status: WorkerTxStatus):
    list_push(spell_id, TXS_STATUS_KEY, status)

func remove_tx_status(spell_id: SpellId, status: WorkerTxStatus):
    Spell spell_id
    str <- Json.stringify(status)
    Spell.list_remove_value(TXS_STATUS_KEY, str)

-- TODO:
-- Store joined worker in KV, status = unregistered
-- Immediately go and register
-- Update worker status in KV with status = registered and pat_id = xxx
-- On start, first go through unregistered workers

-- How to store workers?
--  Maybe store all workers in a list of json objects. Though update would SUCK to implement.
--  Maybe put unregistered and registered to different lists?
--      But then it may be possible to send register tx more than 1 time: eg if TTL ends during removal from "unregistered" list
--  Maybe store by id. But then it's impossible to retrieve them all.
--  Maybe implement custom SQL storage in connector? But that's cheating, how will others write spells then?

-- There's an EASIER way
-- Don't increment last_seen_block until workers are registered, and that's it.
-- If TTL happens during registration, last_seen_block won't be incremented,
--  so we'll load same Chain Events and repeat the whole deployment and registration once again.
-- Remember to track registration failures though, and retry them
func register_worker(chain: ChainInfo, spell_id: SpellId, deal_id: DealId, worker_id: WorkerId, pat_id: []u8) -> bool:
    result <- ChainConnector.register_worker(pat_id, worker_id, chain, deal_id)
    is_ok = result.success
    if result.success:
        deal_log(spell_id, deal_id, ["registered worker tx_hash", result.tx_hash])
        store_tx(spell_id, WorkerTxInfo(deal_id = deal_id, tx_hash = result.tx_hash!))
    else:
        deal_log(spell_id, deal_id, ["error registering worker", result.error!])
        store_tx_failed_deal(spell_id, deal_id, result.error!, nil, nil)
    <- is_ok

func txs_unknown(spell_id: SpellId) -> []WorkerTxInfo:
    Spell spell_id

    all_txs <- Spell.list_get_strings(TXS_KEY)

    known_txs_statuses  <- Spell.list_get_strings(TXS_STATUS_KEY)
    known_txs: *string
    for status_str <- known_txs_statuses.strings:
        try:
            status <- JsonWorkerTxStatus.parse(status_str)
            known_txs <<- Json.stringify(status.tx_info)
        catch e:
            spell_log(spell_id, ["can't parse worker tx status:", status_str, "error:", e])


    unknown_txs_str <- Array.diff(all_txs.strings, known_txs)

    unknown_txs: *WorkerTxInfo
    for tx <- unknown_txs_str:
        try:
            unknown_txs <<- JsonWorkerTxInfo.parse(tx)
        catch e:
            spell_log(spell_id, ["can't parse worker tx info:", tx, "error:", e])

    <- unknown_txs

func poll_txs(spell_id: SpellId, api_endpoint: string):
    txs <- txs_unknown(spell_id)
    if txs.length != 0:
        spell_log(spell_id, ["tracking txs for", txs.length, "deals"])
        result <- ChainConnector.get_tx_statuses(api_endpoint, txs)
        if !result.success:
            spell_log(spell_id, ["couldn't make batch jsonrpc request:", result.error])
        else:
            for status <- result.results:
                if !status.success:
                    deal_log(spell_id, status.tx.deal_id, ["couldn't find tx status:", "tx_hash:", status.tx.tx_hash, "error:", status.error ])
                else:
                    if status.status != "pending":
                        store_tx_status(spell_id, WorkerTxStatus(tx_info = status.tx, status = status.status))
                        if status.status == "failed":
                            store_tx_failed_deal(spell_id, status.tx.deal_id, "transaction failed", ?[status.tx.tx_hash], status.block_number)
                            deal_log(spell_id, status.tx.deal_id, ["transaction failed, tx_hash:", status.tx.tx_hash, "block_number:", status.block_number])
