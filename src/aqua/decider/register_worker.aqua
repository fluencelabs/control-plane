module RegisterWorker declares register_worker, WorkerTxInfo

import DealId, SpellId, WorkerId, PAT from "../types.aqua"
import spell_log, deal_log, list_push from "../fluence/spell.aqua"
import ChainConnector, RegisterWorkerResult from "services.aqua"
import ChainInfo from "../chain/chain.aqua"
import Spell from "@fluencelabs/spell/spell_service.aqua"
import Json from "../fluence/peer.aqua"
import store_tx_failed_deal from "decider/deal_storage.aqua"
alias TxHash: string

const REGISTRATION_KEY = "worker_registration_txs"

data WorkerTxInfo:
    deal_id: DealId
    worker_id: WorkerId
    tx_hash: TxHash

service JsonWorkerTxInfo("json"):
    parse(str: string) -> WorkerTxInfo 

func store_tx(spell_id: SpellId, tx_info: WorkerTxInfo):
    list_push(spell_id, REGISTRATION_KEY, tx_info)

-- TODO:
-- Store joined worker in KV, status = unregistered
-- Immediately go and register
-- Update worker status in KV with status = registered and pat_id = xxx
-- On start, first go through unregistered workers

-- How to store workers?
--  Maybe store all workers in a list of json objects. Though update would SUCK to implement.
--  Maybe put unregistered and registered to different lists?
--      But then it may be possible to send register tx more than 1 time: eg if TTL ends during removal from "unregistered" list
--  Maybe store by id. But then it's impossible to retrieve them all.
--  Maybe implement custom SQL storage in connector? But that's cheating, how will others write spells then?

-- There's an EASIER way
-- Don't increment last_seen_block until workers are registered, and that's it.
-- If TTL happens during registration, last_seen_block won't be incremented,
--  so we'll load same Chain Events and repeat the whole deployment and registration once again.
-- Remember to track registration failures though, and retry them

func register_worker(chain: ChainInfo, spell_id: SpellId, deal_id: DealId, worker_id: WorkerId, pat_id: []u8) -> bool:
    result <- ChainConnector.register_worker(pat_id, worker_id, chain, deal_id)
    is_ok = result.success
    if result.success:
        deal_log(spell_id, deal_id, ["registered worker", result.tx_hash])
        store_tx(spell_id, WorkerTxInfo(deal_id = deal_id, worker_id = worker_id, tx_hash = result.tx_hash!))
    else:
        deal_log(spell_id, deal_id, ["error registering worker", result.error!])
        store_tx_failed_deal(spell_id, deal_id, worker_id, result.error!, nil)
    <- is_ok