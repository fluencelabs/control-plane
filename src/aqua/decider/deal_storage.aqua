module DealStorage declares *

import Spell from "@fluencelabs/spell/spell_service.aqua"

import FAILED_DEALS, JOINED_DEALS from "./consts.aqua"
import Json from "../fluence/peer.aqua"
import spell_log, get_string, deal_log, list_push from "../fluence/spell.aqua"
import DealId, SpellId, WorkerId, Block from "../types.aqua"

import DealInfo, DealMatched from "services.aqua"

data DealState:
    left_boundary: string

service JsonDealState("json"):
    parse(str: string) -> DealState

func store_deal_state(decider_id: SpellId, deal_id: DealId, state: DealState):
    Spell decider_id

    json <- Json.stringify(state)
    Spell.set_string(deal_id, json)

func get_deal_state(decider_id: SpellId, deal_id: DealId) -> ?DealState:
    Spell decider_id
    state: *DealState

    json <- Spell.get_string(deal_id)
    if json.success && !json.absent:
        try:
            state <- JsonDealState.parse(json.str)
        catch e:
            deal_log(decider_id, deal_id, ["failed to parse deal state from json", e])
    else:
        deal_log(decider_id, deal_id, ["deal state not found:", json.error])

    <- state

data JoinedDeal:
    deal_id: DealId
    worker_id: WorkerId

service JsonJoinedDeal("json"):
    parse(str: string) -> JoinedDeal

func store_joined_deal(decider_id: SpellId, deal_id: DealId, worker_id: WorkerId):
    Spell decider_id
    deal = JoinedDeal(deal_id = deal_id, worker_id = worker_id)
    msg <- Json.stringify(deal)
    Spell.list_push_string(JOINED_DEALS, msg)

func get_joined_deals(spell_id: SpellId) -> []JoinedDeal:
    Spell spell_id

    joined_deals: *JoinedDeal

    list <- Spell.list_get_strings(JOINED_DEALS)
    if !list.success:
        spell_log(spell_id, ["can't restrive joined deals", list.error])
    else:
        for joined_deal_str <- list.strings:
            try:
                joined_deals <- JsonJoinedDeal.parse(joined_deal_str)
            catch e:
                spell_log(spell_id, ["error parsing JoinedDeal", joined_deal_str, e])

    <- joined_deals

func store_deal(spell_id: SpellId, deal_id: DealId, worker_id: WorkerId, block: Block):
    try:
        store_joined_deal(spell_id, deal_id, worker_id)
        store_deal_state(spell_id, deal_id, DealState(left_boundary = block))
        deal_log(spell_id, deal_id, "deal state saved to kv")
    catch e:
        deal_log(spell_id, deal_id, ["cannot store deal state, deal join failed", e.message])


data InstallationFailed:
    log: DealMatched

data TxFailed:
    tx_hash: ?string
    block_number: ?string

data FailedDealError:
    type: string
    content: âŠ¤

-- Deal for which we weren't able to create a worker
data FailedDeal:
   deal_id: DealId
   message: string
   payload: FailedDealError


service JsonFailedDeal("json"):
    parse(str: string) -> FailedDeal

func store_installation_failed_deal(spell_id: SpellId, deal_id: DealId, log: DealMatched, error: string):
    deal = FailedDeal(
        deal_id = deal_id,
        message = error,
        payload = FailedDealError(
            type = "InstallationFailed",
            content = InstallationFailed(log = log)
        )
    )
    list_push(spell_id, FAILED_DEALS, deal)

func store_tx_failed_deal(spell_id: SpellId, deal_id: DealId, error: string, tx_hash: ?string, block_number: ?string):
    deal = FailedDeal(
        deal_id = deal_id,
        message = error,
        payload = FailedDealError(
            type = "TxFailed",
            content = TxFailed(tx_hash = tx_hash, block_number = block_number)
        )
    )
    list_push(spell_id, FAILED_DEALS, deal)

func get_failed_deals(spell_id: SpellId) -> []FailedDeal, []string:
    Spell spell_id

    deals: *FailedDeal
    errors: *string

    result <- Spell.list_get_strings(FAILED_DEALS)
    if !result.success:
        errors <<- result.error
    else:
        for str <- result.strings:
            try:
                deals <<- JsonFailedDeal.parse(str)
            catch e:
                errors <- Json.stringify(["can't parse FaileDeal", e, str])
    <- deals, errors
