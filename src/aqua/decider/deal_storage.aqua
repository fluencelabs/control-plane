module DealStorage declares DealState, JoinedDeal, JsonDealState, JsonJoinedDeal, store_deal_state, get_deal_state, store_joined_deal, get_joined_deals, make_change_reqs, get_joined_deals

import Spell from "@fluencelabs/spell/spell_service.aqua"

import Json from "../fluence/peer.aqua"
import spell_log, get_string, deal_log from "../fluence/spell.aqua"
import DealId, SpellId, WorkerId from "../types.aqua"

import DealInfo, DealChangesReq from "services.aqua"


data DealState:
    left_boundary: string

data JoinedDeal:
    deal_id: DealId
    worker_id: WorkerId

service JsonDealState("json"):
    parse(str: string) -> DealState

service JsonJoinedDeal("json"):
    parse(str: string) -> JoinedDeal


func store_deal_state(decider_id: SpellId, deal_id: DealId, state: DealState):
    Spell decider_id
    deal_log(decider_id, deal_id, ["store left boundary", state.left_boundary])

    json <- Json.stringify(state)
    Spell.set_string(deal_id, json)

func get_deal_state(decider_id: SpellId, deal_id: DealId) -> ?DealState:
    Spell decider_id
    state: ?DealState

    json <- Spell.get_string(deal_id)
    if json.success && !json.absent:
        try:
            state <- JsonDealState.parse(json.str)
        catch e:
            deal_log(decider_id, deal_id, ["failed to parse deal state from json", e])
    else:
        deal_log(decider_id, deal_id, ["deal state not found:", json.error])

    <- state

func store_joined_deal(decider_id: SpellId, deal_id: DealId, worker_id: WorkerId):
    Spell decider_id
    deal = JoinedDeal(deal_id = deal_id, worker_id = worker_id)
    msg <- Json.stringify(deal)
    Spell.list_push_string("joined_deals", msg)

func get_joined_deals(spell_id: SpellId) -> []JoinedDeal:
    Spell spell_id

    joined_deals: *JoinedDeal

    list <- Spell.list_get_strings("joined_deals")
    if !list.success:
        spell_log(spell_id, ["can't restrive joined deals", list.error])
    else:
        for joined_deal_str <- list.strings:
            try:
                joined_deals <- JsonJoinedDeal.parse(joined_deal_str)
            catch e:
                spell_log(spell_id, ["error parsing JoinedDeal", joined_deal_str, e])

    <- joined_deals

func make_change_reqs(spell_id: SpellId, deals: []JoinedDeal) -> []DealChangesReq:
    requests: *DealChangesReq

    if deals != nil:
        -- Collect info about all known deals
        deal_updates: *DealChangesReq
        for joined_deal <- deals:
            deal_id = joined_deal.deal_id
            deal_state <- get_deal_state(spell_id, deal_id)
            if deal_state != nil:
                deal_info = DealInfo(deal_id = deal_id, worker_id = joined_deal.worker_id)
                requests <<- DealChangesReq(deal_info = deal_info, left_boundary = deal_state!.left_boundary)

    <- requests
