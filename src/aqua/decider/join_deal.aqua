module JoinDeal declares join_deal

import PeerSpell from "@fluencelabs/spell/api.aqua"
import Spell, TriggerConfig from "@fluencelabs/spell/spell_service.aqua"

import Worker from "../fluence/peer.aqua"
import deal_log from "../fluence/spell.aqua"
import get_worker_settings, WorkerArgs from "../fluence/worker.aqua"
import DealState, store_joined_deal, store_deal_state from "../decider/deal_storage.aqua"
import DealId, SpellId, CID from "../types.aqua"

import DealCreated from "services.aqua"

func install_deal_spell(deal_id: DealId, cid: CID, ipfs: string, script: string, trigger: TriggerConfig) -> string:
    args = WorkerArgs(deal_id = deal_id, worker_def_cid = cid, ipfs = ipfs)
    worker_spell_id <- PeerSpell.install(script, args, trigger)
    <- worker_spell_id

func join_deal(spell_id: SpellId, deal: DealCreated):
    deal_id = deal.info.deal_id

    log = (msg: âŠ¤):
        deal_log(spell_id, deal_id, msg)

    log(["joining the deal", deal.info.deal_id, "from_block", deal.block_number])
    settings, is_ok <- get_worker_settings(spell_id)
    if is_ok == false:
        log("error reading worker settings, deal join failed")
    else:
        try:
            worker_id <- Worker.create(deal_id)
            log(["created worker for deal", worker_id])

            on worker_id:
                ipfs = settings!.worker_ipfs
                script = settings!.worker_script
                trigger = settings!.worker_config
                app_cid = deal.info.app_cid
                deal_spell <- install_deal_spell(deal_id, app_cid, ipfs, script, trigger)
                log(["created worker spell for deal", deal_spell])

                store_joined_deal(spell_id, deal_id, deal_spell, worker_id)

                deal_state = DealState(from_block = deal.block_number)
                store_deal_state(spell_id, deal_id, deal_state)
                log("joined the deal")

        catch e:
            log(["cannot create worker, deal join failed", e.message])
