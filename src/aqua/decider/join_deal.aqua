aqua JoinDeal declares join_deal

import PeerSpell from "@fluencelabs/spell/api.aqua"
import CUID from "@fluencelabs/aqua-lib/workers.aqua"
import Spell, TriggerConfig from "@fluencelabs/spell/spell_service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

import deal_log from "../fluence/spell.aqua"
import WorkerArgs, WorkerSettings from "../fluence/worker.aqua"
import DealState from "../decider/deal_storage.aqua"
import DealId, SpellId, WorkerId, CID, Block from "../types.aqua"
import Json from "../fluence/peer.aqua"

import DealCreated from "services.aqua"

import Srv from "@fluencelabs/aqua-lib/builtin.aqua"

use "../fluence/worker.aqua" as WorkerHelper
import "@fluencelabs/aqua-lib/workers.aqua"

func empty_clock_config() -> ClockConfig:
    <- ClockConfig(start_sec = 0, end_sec = 0, period_sec = 0)

func empty_blockchain_config() -> BlockChainConfig:
    <- BlockChainConfig(start_block = 0, end_block = 0)

func empty_connection_config() -> ConnectionPoolConfig:
    <- ConnectionPoolConfig(connect = false, disconnect = false)

func empty_trigger_config() -> TriggerConfig:
    <- TriggerConfig(clock = empty_clock_config(), connections = empty_connection_config(), blockchain = empty_blockchain_config())

func install_deal_spell(deal_id: DealId, cid: CID, settings: WorkerSettings) -> string:
    args = WorkerArgs(deal_id = deal_id, h_worker_def_cid = cid, ipfs = settings.ipfs)
    -- Here we install the spell but want the worker-spell not to run since the worker will be deactivated afterwards
    worker_spell_id <- PeerSpell.install(settings.script, args, empty_trigger_config(), "worker-spell")
    <- worker_spell_id

-- TODO: what should happen if join_deal has failed? We might never receive it again
--       Probably should store failed deals, and then retry them a few times?
-- 
-- When joinin a deal we create a worker. BUT the worker must be deactivated. Later, we will check the deal status
-- to determine if it's time to activate the deal. For now, it's enough to allocate the worker.
func join_deal(spell_id: SpellId, deal_id: DealId, app_cid: CID, settings: WorkerSettings, cu_ids: []CUID) -> ?WorkerId, ?string:
    log = (msg: ‚ä§):
        deal_log(spell_id, deal_id, msg)

    log(["joining a deal"])
    worker_id: *WorkerId
    error: *string
    try:
        id <- WorkerHelper.create(spell_id, deal_id, cu_ids)
        if id != nil:
            worker_id <<- id!
    catch e:
        error <<- Json.stringify(["error creating worker", e])
        log(["error creating worker", e])

    if worker_id != nil:
        -- If the worker is deactivated, the worker spell is already installed there, so we don't need
        -- to do anything else.
        -- If the worker is active, the worker spell is either not installed (and we install it rn) 
        -- or is installed, and we just deactivating the worker. If the deal status is ACTIVE, we just
        -- activate the deal when we check the status. 
        if Worker.is_active(deal_id):
            on worker_id!:
                try:
                    try:
                        deal_spell <- Srv.resolve_alias("worker-spell")
                        log(["resolved existing worker-spell", deal_spell])
                    otherwise:
                        deal_spell <- install_deal_spell(deal_id, app_cid, settings)
                        log(["created deal spell", deal_spell])
                    catch e:
                        error <<- Json.stringify(["error installing deal spell", e])
                        log(["error installing deal spell", e])
                catch e:
                    error <<- Json.stringify(["cannot create deal spell", e.message])
                    log(["cannot create deal spell, deal join failed", e.message])

            try:
                Worker.deactivate(deal_id)
            catch e:
                err = ["error deactivating worker", e]
                error <<- Json.stringify(err)
                log(err)

    <- worker_id, error
