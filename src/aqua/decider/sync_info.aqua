module SyncInfo declares store_sync_info

import Spell from "@fluencelabs/spell/spell_service.aqua"
import Json from "../fluence/peer.aqua"
import SpellId from "../types.aqua"
import ChainConnector from "services.aqua"
import get_counter, spell_log from "../fluence/spell.aqua"
import SYNC_INFO from "../decider/consts.aqua"
use "../chain/last_seen.aqua" as LastSeen

data SyncInfo:
    run_updated: u32
    blocks_diff: u64

func store_sync_info(spell_id: SpellId, latest_block_hex: string):
    Spell spell_id

    last_seen <- LastSeen.get(spell_id)
    if last_seen != nil:
        diff <- ChainConnector.hex_diff(last_seen!, latest_block_hex)
        counter <- get_counter(spell_id)
        info = SyncInfo(run_updated = counter, blocks_diff = diff) 
        info_str <- Json.stringify(info)
        result <- Spell.set_string(SYNC_INFO, info_str)
        if !result.success:
            spell_log(spell_id, ["can't updated sync state", info, "error", result.error])