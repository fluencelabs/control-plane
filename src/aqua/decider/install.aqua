aqua Intsall declares install_worker_spell 

import PeerSpell from "@fluencelabs/spell/api.aqua"
import Spell, TriggerConfig from "@fluencelabs/spell/spell_service.aqua"

import deal_log from "../fluence/spell.aqua"
import WorkerArgs, WorkerSettings from "../fluence/worker.aqua"
import DealState from "../decider/deal_storage.aqua"
import DealId, SpellId, WorkerId, CID, Block from "../types.aqua"
import Json from "../fluence/peer.aqua"

import DealCreated from "services.aqua"

import Srv from "@fluencelabs/aqua-lib/builtin.aqua"

use "../fluence/worker.aqua" as Worker

func install(deal_id: DealId, cid: CID, settings: WorkerSettings) -> string:
    args = WorkerArgs(deal_id = deal_id, h_worker_def_cid = cid, ipfs = settings.ipfs)
    worker_spell_id <- PeerSpell.install(settings.script, args, settings.config, "worker-spell")
    <- worker_spell_id

func install_worker_spell(deal_id: DealId, cid: CID, settings: WorkerSettings):
    try:
        try:
            deal_spell <- Srv.resolve_alias("worker-spell")
            log(["resolved existing worker-spell", deal_spell])
        otherwise:
            deal_spell <- install(deal_id, app_cid, settings)
            log(["created deal spell", deal_spell])
        catch e:
            error <<- Json.stringify(["error installing deal spell", e])
            log(["error installing deal spell", e])
    catch e:
        error <<- Json.stringify(["cannot create deal spell", e.message])
        log(["cannot create deal spell, deal join failed", e.message])
