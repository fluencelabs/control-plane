--
-- Decider creates Nox workers based on Chain state
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--aqua DealRemoved declares remove_deals, remove_deal

import Worker from "@fluencelabs/aqua-lib/workers.aqua"

import DealId, WorkerId from "../types.aqua"
import spell_log, deal_log from "../fluence/spell.aqua"

use "../storage/deal.aqua" as DealStorage

func remove_deal(deal_id: DealId, worker_id: WorkerId):
    deal_log(deal_id, "Removing the worker and the deal state from kv")
    try:
        Worker.remove(worker_id)
        -- remove the state of the deal only when the worker is removed, otherwise we couldn't try on the next run
        DealStorage.remove_deal(deal_id)
    catch e:
        deal_log(deal_id, ["error: Couldn't remove a worker, try on the next run", worker_id, e])

func remove_deals(deals: []DealId):
    for deal_id <- deals:
        worker_id <- Worker.get_worker_id(deal_id)
        if worker_id == nil:
            deal_log(deal_id, ["error: Cannot remove the deal: worker isn't found for the deal, will only clear storage"])
            DealStorage.remove_deal(deal_id)
        else:
            remove_deal(deal_id, worker_id!)
