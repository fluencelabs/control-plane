aqua DealRemoved declares remove_deals, remove_deal

import Worker from "@fluencelabs/aqua-lib/workers.aqua"

import DealId, WorkerId from "../types.aqua"
import spell_log, deal_log from "../fluence/spell.aqua"

import JoinedDeal from "../storage/deal.aqua"
use "../storage/deal.aqua" as DealStorage

func remove_deal(deal: JoinedDeal, worker_id: WorkerId):
    deal_log("spell", deal.deal_id, "removing the worker and the deal state from kv")
    try:
        Worker.remove(worker_id)
        -- remove the state of the deal only when the worker is removed, otherwise we couldn't try on the next run
        DealStorage.remove_deal(deal)
    catch e:
        deal_log("spell", deal.deal_id, ["couldn't remove a worker, try on the next run", worker_id, e])

func remove_deals(deals: []JoinedDeal):
    for deal <- deals:
        worker_id <- Worker.get_worker_id(deal.deal_id)
        if worker_id == nil:
            -- wtf
            deal_log("spell", deal.deal_id, "worker is not found for the deal")
        else:
            remove_deal(deal, worker_id!)