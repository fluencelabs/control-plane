--
-- Decider creates Nox workers based on Chain state
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua DealUpdate declares *

import Worker from "@fluencelabs/aqua-lib/workers.aqua"

import SpellId, WorkerId from "../types.aqua"
import spell_log, deal_log from "../fluence/spell.aqua"
import Deal from "../fluence/connector.aqua"
import update_app_cid from "../worker/worker_app_cid.aqua"
import WorkerSettings, trigger_worker_spell from "../worker/worker.aqua"

use "./status.aqua" as DealStatus

-- Note:
-- * We can update the deal even if the worker is inactive since nox allows it for the root worker
-- * Triggering the Worker Spell can speed-up the updating process but also may disript it when two WS are run
func update_deal(worker_settings: WorkerSettings, worker_id: WorkerId, deal: Deal):
    is_updated <- update_app_cid(worker_id, deal.deal_id, deal.app_cid)
    was_active <- Worker.is_active(deal.deal_id)
    DealStatus.update(worker_id, deal)
    is_active <- Worker.is_active(deal.deal_id)
    if is_updated == nil:
        deal_log(deal.deal_id, ["Error updating App CID"])
    else:
        if is_updated!:
            deal_log(deal.deal_id, ["App CID updated to", deal.app_cid])
            if was_active && is_active:
                trigger_worker_spell(worker_id, worker_settings)

func update_deals(worker_settings: WorkerSettings, deals: []Deal):
    for deal <- deals:
        worker_id <- Worker.get_worker_id(deal.deal_id)
        if worker_id == nil:
            deal_log(deal.deal_id, ["Worker not found for the update"])
        else:
            try:
                update_deal(worker_settings, worker_id!, deal)
            catch e:
                deal_log(deal.deal_id, ["Error updating deal:", e])
