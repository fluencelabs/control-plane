--
-- Decider creates Nox workers based on Chain state
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua DealStatus declares update, should_install, is_active

import Worker from "@fluencelabs/aqua-lib/workers.aqua"

import "../consts.aqua"
import spell_log, deal_log from "../fluence/spell.aqua"
import DealId, WorkerId from "../types.aqua"
import Deal from "../fluence/connector.aqua"

-- Note: SMALL_BALANCE also considered to be an active state, just a warning that
-- the deal will be out of money soon
func is_active(status: string) -> bool:
    <- status == DEAL_STATUS_ACTIVE || status == DEAL_STATUS_SMALL_BALANCE

func is_inactive(status: string) -> bool:
    <- status == DEAL_STATUS_NOT_ENOUGH_WORKERS

-- On these statuses, Nox will eventually exit the deal and decider will remove it when these happens,
-- now just deactivate the workers to prevent them from doing any work
func is_ended(status: string) -> bool:
    <- status == DEAL_STATUS_ENDED || status == DEAL_STATUS_INSUFFICIENT_FUNDS

func should_install(status: string) -> bool:
    <- is_active(status) || is_inactive(status)


func activate_deal(deal_id: DealId):
    try:
        if !Worker.is_active(deal_id):
            deal_log(deal_id, "Activating worker")
            Worker.activate(deal_id)
    catch e:
        deal_log(deal_id, ["Couldn't activate a worker", e])

func deactivate_deal(deal_id: DealId):
    try:
        if Worker.is_active(deal_id):
            deal_log(deal_id, "Deactivating worker")
            Worker.deactivate(deal_id)
    catch e:
        deal_log(deal_id, ["Couldn't deactivate a worker", e])


func update(worker_id: WorkerId, deal: Deal):
    if is_active(deal.status):
        activate_deal(deal.deal_id)
    else:
        if is_inactive(deal.status):
            deactivate_deal(deal.deal_id)
        else: 
            if is_ended(deal.status):
                deal_log(deal.deal_id, ["Deactivating deal before removal based on status", deal.status])
                deactivate_deal(deal.deal_id)
            else:
                deal_log(deal.deal_id, ["Unsupported deal status:", deal.status])
