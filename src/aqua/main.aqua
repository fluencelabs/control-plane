--
-- Decider creates Nox workers based on Chain state
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua Main declares *

export main

import SpellId, DealId, WorkerId, Deal from "./types.aqua"
import CUID, Worker from "@fluencelabs/aqua-lib/workers.aqua"

import WorkerSettings from "./worker/worker.aqua"

import ChainConnector, info_to_deal, DealResult from "./fluence/connector.aqua"
import spell_log, deal_log from "./fluence/spell.aqua"

use "./storage/deal.aqua" as DealStorage

import install_deals from "./deal/install.aqua"
import update_deals from "./deal/update.aqua"
import remove_deals from "./deal/remove.aqua"
import fetch_register_status from "./worker/tx_status.aqua"

func deal_exists(joined_deals: []DealId, deal_id: DealId) -> bool:
    result: *bool
    for joined_deal_id <- joined_deals:
        if joined_deal_id == deal_id:
            result <<- true
    if result == nil:
        result <<- false
    <- result!

func deal_removed(chain_deals: []Deal, deal_id: DealId) -> bool:
    result: *bool
    for chain_deal <- chain_deals:
        if chain_deal.deal_id == deal_id:
            result <<- false 
    if result == nil:
        result <<- true 
    <- result!

func filter_deals(chain_deals: []Deal, joined_deals: []DealId) -> []Deal, []DealId, []Deal:
    new: *Deal
    existing: *Deal
    remove: *DealId

    for chain_deal <- chain_deals:
        if deal_exists(joined_deals, chain_deal.deal_id):
            -- If the deal from the chain is in the list of joined deals, we need to update it
            existing <<- chain_deal
        else:
            -- Otherwise, it's a new deal
            new <<- chain_deal

    for joined_deal_id <- joined_deals:
        -- If the joined deal isn't in the chain list, it means the deal was removed 
        -- (it was ended or intentionally removed from the provider)
        if deal_removed(chain_deals, joined_deal_id):
            remove <<- joined_deal_id
    <- new, remove, existing

func fetch_deals() -> ?[]Deal:
    results: *[]Deal
    try:

        deals: *Deal
        result <- ChainConnector.get_deals()
        spell_log(["Fetched", result.length, "deals"])
        for deal_result <- result:
            if deal_result.success:
                deals <<- info_to_deal(deal_result.deal_id, deal_result.deal_info!)
            else:
                deal_log(deal_result.deal_id, ["Failed to obtain information about the deal, error:", deal_result.error])
        results <<- deals
    catch e:
        spell_log(["Failed to get deals: ", e])
    <- results 


func process_deals(worker_settings: WorkerSettings):
    spell_log(["Fetching deals..."])
    -- Get the latest deals for the peer from the chain 
    deals <- fetch_deals()
    if deals != nil:
        -- Get the list of known joined deals stored in the Decider
        joined_deals <- DealStorage.get_deals()

        -- Filter the deals into three categories: 
        -- - new_deals we need to install
        -- - updated_deals we need to update
        -- - for removed_deals we need to remove the worker from the peer and the state from the storage
        new, remove, existing <- filter_deals(deals!, joined_deals)
        spell_log(["Found", new.length, "new deals"])
        install_deals(worker_settings, new)

        spell_log(["Found", existing.length, "existing deals"])
        update_deals(worker_settings, existing)

        spell_log(["Found", remove.length, "removed deals"])
        remove_deals(remove)
    
func main(worker_settings: WorkerSettings):
    -- Install/update/remove deals 
    process_deals(worker_settings)

    -- Track the transaction for worker registration and report the problems
    fetch_register_status()
