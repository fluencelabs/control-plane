aqua FromBlock declares evaluate_from_block

import Spell from "@fluencelabs/spell/spell_service.aqua"

import SpellId from "../types.aqua"
import spell_log, get_string from "../fluence/spell.aqua"
import Json from "../fluence/peer.aqua"
import get_latest from "../chain/blocks.aqua"
import ChainInfo from "../chain/chain.aqua"

-- read `init_data.from_block` from KV
-- `from_block` is usually set as a port of `init data` for `decider`
func get_from_block(spell_id: SpellId) -> string:
    Spell spell_id
    from_block: *string

    maybe_from_block <- get_string(spell_id, "from_block")
    if maybe_from_block == nil:
        -- if `from_block` is not set, use "latest" as default
        from_block <<- "latest"
    else:
        parsed_from_block <- Json.parse(maybe_from_block!)
        from_block <<- parsed_from_block

    <- from_block!

-- Evaluate 'latest' or 'earliest' in the `from_block` to actual hex value
-- "latest" => latest block on chain
-- "earliest" => 0x0
func evaluate_from_block(spell_id: SpellId, chain: ChainInfo) -> ?string:
    left: *string
    from_block <- get_from_block(spell_id)
    if from_block == "latest":
        latest <- get_latest(spell_id, chain)
        if latest != nil:
            left <<- latest!
        -- if `get_latest` fails, there's nothing we can do, so return `nil`
    else:
        if from_block == "earliest":
            left <<- "0x0"
        else:
            left <<- from_block
    <- left
