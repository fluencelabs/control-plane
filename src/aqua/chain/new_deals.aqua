module NewDeals declares poll_new_deals

import or, not from "@fluencelabs/aqua-lib/binary.aqua"
import Spell, TriggerConfig from "@fluencelabs/spell/spell_service.aqua"

import FluenceAuroraConnector, DealCreated from "services.aqua"

import AuroraInfo from "aurora.aqua"
import deal_log, spell_log, get_counter, get_string from "../fluence/spell.aqua"
import is_worker_created from "../fluence/worker.aqua"
import Json from "../fluence/peer.aqua"
import join_deal from "../decider/join_deal.aqua"
import SpellId from "../types.aqua"

use "last_seen.aqua" as LastSeen
use "../hex.aqua" as Hex

-- TODO: maybe it's easier to do all calculations in u64, and convert to hex only in JSONRPC?


-- return a value to use as a left boundary in `eth_newLogs`
-- it usually equals to `last seen block`, except on first iteration it is equal to evaluated `from_block`
func get_left_boundary(spell_id: SpellId, chain: AuroraInfo) -> ?string:
    left: ?string

    -- load "last seen" block number
    -- `last seen block` is initialized to the first `left boundary` this function returns
    -- After that, `last seen block` is set to the block number of every next processed Log
    maybe_last_seen <- LastSeen.get(spell_id)
    if maybe_last_seen == nil:
        -- When have not yet seen any blocks, initialize `last seen` to `init_data.from_block`
        last_seen <- LastSeen.init(spell_id, chain)
        if last_seen != nil:
            left <<- last_seen!
        -- if `LastSeen.init` returned `nil`, just bubble up that `nil` by returning it
    else:
        last_seen = maybe_last_seen!
        -- since we have seen all logs in the `last_seen` block,
        -- use `last_seen + 1` as the left boundary
        next <- Hex.inc(spell_id, last_seen)
        if next != nil:
            left <<- next!
        else:
            -- if for some reason `hex_add` failed, use `last_seen` as left boundary
            left <<- last_seen
    <- left

func join_deals(spell_id: SpellId, logs: []DealCreated, left: string):
    Spell spell_id

    -- TODO: I assume that `logs` are sorted by `block_number`. Is that a correct assumption?
    for log <- logs:
        deal_id = log.info.deal_id
        if is_worker_created(spell_id, deal_id):
            deal_log(spell_id, deal_id, "worker for deal is already created")
        else:
            join_deal(spell_id, log)

        -- Use `log.block_number - 1` as a `last seen block`
        -- Can not use `log.block_number` because it is unknown if there are more events from that block in `logs`
        -- If a log from block N is received, then the whole `N-1` block was processed, so save it as the `last seen`
        prev_block <- Hex.dec(spell_id, log.block_number)
        if prev_block != nil:
            -- Set `last seen block` to the `log.block_number - 1` (if it is > `left`)
            -- This way, if particle has timed out during process of a log, `last seen block` would not be updated
            -- And we will try all events from that block again
            LastSeen.gt_set(spell_id, prev_block!, left)

data Poll:
    logs: []DealCreated
    to_block: string

func poll_logs(spell_id: SpellId, chain: AuroraInfo, left: string) -> Poll:
    result <- FluenceAuroraConnector.poll_deal_created(chain.api_endpoint, chain.address, left)
    if result.success == false:
        spell_log(spell_id, ["error polling deal created events", result.error])

    logs = result.result
    spell_log(spell_id, ["created deals from poll:", logs.length, "from block:", left])

    <- Poll(logs = logs, to_block = result.to_block)

func poll_new_deals(spell_id: SpellId, chain: AuroraInfo, latest_block: string):
    -- retrieve block number to poll from
    left <- get_left_boundary(spell_id, chain)
    if left != nil:
        poll <- poll_logs(spell_id, chain, left!)
        join_deals(spell_id, poll.logs, left!)

        -- after we have processed all logs from poll, we can conclude
        -- that we have seen all logs until `min(latest_block, to_block)`
        -- if `to_block >= latest_block` then we have seen up until `latest_block`
        -- if `to_block < latest_block`, then we have seen up until `to_block`
        last_seen <- Hex.min(spell_id, latest_block, poll.to_block)

        if last_seen != nil:
            -- use `increase` to protect against overwriting `current last seen` with a lower value
            -- since `last seen` is updated on every processed log,
            -- `current last seen` equals to the block of the latest processed log,
            -- can be sure `increase` won't overwrite LastSeen
            -- even if `latest_block` < `block of the last processed log`
            LastSeen.increase(spell_id, last_seen!)

    else:
        -- if it's not possible to retrieve `left boundary`, then it's not possible to `poll_logs`
        spell_log(spell_id, ["get_left_boundary returns nil, unable to proceed"])