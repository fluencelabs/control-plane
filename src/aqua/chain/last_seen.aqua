-- LastSeen is a block number
-- If all logs from a block are processed, such a block is called LastSeen
module LastSeen declares get, save, init, gt_set, increase

import Spell from "@fluencelabs/spell/spell_service.aqua"

import spell_log, get_string from "../fluence/spell.aqua"
import SpellId from "../types.aqua"
import ChainInfo from "../chain/chain.aqua"
import evaluate_from_block from "../chain/from_block.aqua"

use "../chain/blocks.aqua" as Blocks

-- `last seen block` is a block for which all events have been processed
func get(spell_id: SpellId) -> ?string:
    Spell spell_id
    last_seen <- get_string(spell_id, "last_seen_block")
    <- last_seen

func save(spell_id: SpellId, hex: string):
    Spell spell_id
    spell_log(spell_id, ["will set last seen to", hex])
    try:
        r <- Spell.set_string("last_seen_block", hex)
        if r.success:
            spell_log(spell_id, ["saved last seen", hex])
        else:
            spell_log(spell_id, ["error saving last_seen_block", r.error])
    catch e:
        spell_log(spell_id, ["error saving last_seen_block", e])

-- initialize `last seen` to the value of `from_block`, so that polls start from that value as a left boundary
-- NOTE: `from_block` is passed as a part of decider's `init data`
func init(spell_id: SpellId, chain: ChainInfo) -> ?string:
    from_block <- evaluate_from_block(spell_id, chain)
    spell_log(spell_id, ["init: will set last seen to", from_block])
    if from_block != nil:
        save(spell_id, from_block!)
    <- from_block

-- Set value of LastSeen to `new_hex` iff `new_hex > known_hex`
-- This is needed to guarantee monotonic increase in LastSeen, ie it will never decrease
func gt_set(spell_id: SpellId, new_hex: string, known_hex: string):
    greater <- Blocks.gt(spell_id, new_hex, known_hex)
    if greater == [true]:
        spell_log(spell_id, ["gt_set: will set last seen to", new_hex])
        save(spell_id, new_hex)

-- Set value of LastSeen to `hex` iff `hex > current last seen`
func increase(spell_id: SpellId, hex: string):
    current <- get(spell_id)
    if current != nil:
        gt_set(spell_id, hex, current!)
    else:
        spell_log(spell_id, ["increase: will set last seen to", hex])
        save(spell_id, hex)
