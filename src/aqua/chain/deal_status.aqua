module DealStatus declares *

import Worker from "@fluencelabs/aqua-lib/workers.aqua"

import JoinedDeal, remove_deal from "../decider/deal_storage.aqua"
import DEAL_STATUS_ENDED, DEAL_STATUS_ACTIVE, DEAL_STATUS_INACTIVE from "../decider/consts.aqua"
import spell_log, deal_log from "../fluence/spell.aqua"
import SpellId, DealId from "../types.aqua"
import remove_ended_deal from "../decider/deal_removed.aqua"

import "services.aqua"

func activate_deal(spell_id: SpellId, deal_id: DealId):
    try:
        if !Worker.is_active(deal_id):
            Worker.activate(deal_id)
    catch e:
        deal_log(spell_id, deal_id, ["couldn't activate a worker", e])

func deactivate_deal(spell_id: SpellId, deal_id: DealId):
    try:
        if Worker.is_active(deal_id):
            Worker.deactivate(deal_id)
    catch e:
        deal_log(spell_id, deal_id, ["couldn't deactivate a worker", e])

func poll_deal_statuses_by_ids(spell_id: SpellId, api_endpoint: string, deal_ids: []DealId):
    result <- ChainConnector.get_status_batch(api_endpoint, deal_ids)
    if !result.success:
        spell_log(spell_id, ["couldn't obtain deal statuses, error: ", result.error!])
    else:
        spell_log(spell_id, ["found statuses for", result.statuses.length, "deals"])
        for deal_status <- result.statuses:
            if !deal_status.success:
                spell_log(spell_id, ["couldn't obtain deal status, error:", deal_status.error!])
            else:
                -- What if Aqua had else-if statement? What if Aqua has match statement? Dreams.
                if deal_status.status == DEAL_STATUS_ENDED:
                    remove_ended_deal(spell_id, deal_status.deal_id)
                else:
                    if deal_status.status == DEAL_STATUS_INACTIVE:
                        deactivate_deal(spell_id, deal_status.deal_id)
                    else:
                        if deal_status.status == DEAL_STATUS_ACTIVE:
                            activate_deal(spell_id, deal_status.deal_id)
                        else: 
                            spell_log(spell_id, ["unsupported deal status: ", deal_status])


func poll_deal_statuses(spell_id: string, api_endpoint: string, joined_deals: []JoinedDeal):
    deal_ids: *string 

    for joined_deal <- joined_deals:
        deal_ids <<- joined_deal.deal_id

    if deal_ids != nil:
        poll_deal_statuses_by_ids(spell_id, api_endpoint, deal_ids)
