module Blocks declares get_latest, lte, gt

import get_string, spell_log from "../fluence/spell.aqua"
import ChainInfo from "../chain/chain.aqua"
import SpellId from "../types.aqua"

import ChainConnector from "services.aqua"

-- Get latest block number from RPC
func get_latest(spell_id: SpellId, chain: ChainInfo) -> ?string:
    latest: ?string
    latest_block <- ChainConnector.latest_block_number(chain.api_endpoint)
    if latest_block.success:
        latest <<- latest_block.number_hex
    else:
        spell_log(spell_id, ["error retrieving latest block number", latest_block.error])
    <- latest

-- implements Less Than or Equal for two hex strings, i.e. `hex_a <= hex_b`
-- returns nil if either `hex_a` or `hex_b` is an invalid hex
func lte(spell_id: string, hex_a: string, hex_b: string) -> ?bool:
    lte: ?bool

    cmp <- ChainConnector.hex_cmp(hex_a, hex_b)
    if cmp.success:
        -- `hex_a` is less than `hex_b`
        if cmp.ordering == -1:
            lte <<- true
        -- `hex_a` equals to `hex_b`
        if cmp.ordering == 0:
            lte <<- true
        -- `hex_a` is greater than `hex_b`
        if cmp.ordering == 1:
            lte <<- false
    else:
        spell_log(spell_id, ["hex_cmp error", cmp.error])

    <- lte

-- `hex_a > hex_b`
func gt(spell_id: string, hex_a: string, hex_b: string) -> ?bool:
    gt: ?bool

    cmp <- ChainConnector.hex_cmp(hex_a, hex_b)
    if cmp.success:
        -- `hex_a` is less than `hex_b`
        if cmp.ordering == -1:
            gt <<- false
        -- `hex_a` equals to `hex_b`
        if cmp.ordering == 0:
            gt <<- false
        -- `hex_a` is greater than `hex_b`
        if cmp.ordering == 1:
            gt <<- true
    else:
        spell_log(spell_id, ["hex_cmp error", cmp.error])

    <- gt
