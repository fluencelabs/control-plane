module Blocks declares get_latest, lte, gt

import get_string, spell_log from "../fluence/spell.aqua"
import ChainInfo from "../chain/chain.aqua"
import SpellId from "../types.aqua"

import ChainConnector from "services.aqua"

-- Get latest block number from RPC
func get_latest(spell_id: SpellId, chain: ChainInfo) -> ?string:
    latest: *string
    latest_block <- ChainConnector.latest_block_number(chain.api_endpoint)
    if latest_block.success:
        latest <<- latest_block.number_hex
    else:
        spell_log(spell_id, ["error retrieving latest block number", latest_block.error])
    <- latest

-- Implements comparison for two hex strings
-- spell_id - spell id for error log
-- hex_a - left hex string
-- hex_b - right hex string
-- pred - func from ordering to result 
--        ordering is -1 for <, 0 for =, 1 for >
-- returns nil if either `hex_a` or `hex_b` is an invalid hex
func hex_cmp(spell_id: SpellId, hex_a: string, hex_b: string, pred: i8 -> bool) -> ?bool:
    result: *bool

    cmp <- ChainConnector.hex_cmp(hex_a, hex_b)

    if cmp.success:
        result <- pred(cmp.ordering)
    else:
        spell_log(spell_id, ["hex_cmp error", cmp.error])

    <- result

-- LTE for two hex strings, i.e. `hex_a <= hex_b`
func lte(spell_id: SpellId, hex_a: string, hex_b: string) -> ?bool:
    pred = (ord: i8) -> bool:
        <- ord <= 0

    <- hex_cmp(spell_id, hex_a, hex_b, pred)

-- GT for two hex strings, i.e. `hex_a > hex_b`
func gt(spell_id: string, hex_a: string, hex_b: string) -> ?bool:
    pred = (ord: i8) -> bool:
        <- ord > 0

    <- hex_cmp(spell_id, hex_a, hex_b, pred)
