module Spell declares get_string, spell_log, get_counter, deal_log

import Spell from "@fluencelabs/spell/spell_service.aqua"
import Op from "@fluencelabs/aqua-lib/builtin.aqua"
import RunConsoleManyAny from "../debug.aqua"
import SpellId, DealId from "../types.aqua"
import OpExt, Json from "peer.aqua"

func spell_log(spell_id: SpellId, msg: ⊤):
    co RunConsoleManyAny.print("decider", msg)
    msg_str <- Json.stringify(msg)
    Spell spell_id
    Spell.list_push_string("logs", msg_str)

func deal_log(spell_id: SpellId, deal_id: DealId, msg: ⊤):
    title <- OpExt.concat_strings("decider deal_id=", deal_id, ": ")
    co RunConsoleManyAny.print(title, msg)
    msg_str <- Json.stringify(msg)
    msg_full <- Op.concat_strings(title, msg_str)
    Spell spell_id
    Spell.list_push_string("logs", msg_full)

-- Wrapper over spell.get_string to get a string from spell's KV with reduced amount of if-else's
func get_string(spell_id: SpellId, key: string) -> ?string:
    Spell spell_id

    result: *string

    value <- Spell.get_string(key)
    if value.success == false:
        spell_log(spell_id, ["get_string failed", key, value.error])
    else:
        if value.absent == false:
            result <<- value.str
    <- result


func get_counter(spell_id: SpellId) -> u32:
    Spell spell_id
    result: *u32
    counter <- Spell.get_u32("counter")
    if counter.success:
        result <<- counter.num
    else:
        result <<- 0
    <- result!
