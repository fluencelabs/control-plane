module Worker declares WorkerArgs, WorkerSettings, get_worker_settings, is_worker_created

import TriggerConfig, Spell from "@fluencelabs/spell/spell_service.aqua"

import spell_log, get_string from "../fluence/spell.aqua"
import Worker, Json, OpExt, JsonTriggerConfig from "../fluence/peer.aqua"
import DealId, SpellId from "../types.aqua"

-- Arguments of the worker
data WorkerArgs:
    -- Address of the deal is also an ID of the deal
    deal_id: DealId
    -- CID of the worker's definition
    worker_def_cid: string
    -- IPFS API where the related CID resides
    ipfs: string

-- Settings of the worker for the decider
data WorkerSettings:
    -- Trigger config of the worker
    worker_config: TriggerConfig
    -- Worker's AIR script
    worker_script: string
    -- IPFS API for the worker to pull info from
    worker_ipfs: string

-- Parse worker-settings from the decider's KV
func get_worker_settings(spell_id: SpellId) ->  ?WorkerSettings, bool:
    Spell spell_id
    log = (msg: ‚ä§):
        spell_log(spell_id, [msg])

    result: *bool
    settings: *WorkerSettings

    worker_script_str, is_ok1 <- get_string(spell_id, "worker_script")
    worker_config_str, is_ok2  <- get_string(spell_id, "worker_config")
    worker_ipfs_str, is_ok3  <- get_string(spell_id, "worker_ipfs")

    -- :c
    if is_ok1 == false:
        log("get_worker_settings: worker_script is not set")
        result <<- false
    else:
        if is_ok2 == false:
            log("get_worker_settings: worker_config is not set")
            result <<- false
        else:
            if is_ok3 == false:
                log("get_worker_settings: worker_ipfs is not set")
                result <<- false
            else:
                worker_script <- Json.parse(worker_script_str!)
                worker_config <- JsonTriggerConfig.parse(worker_config_str!)
                worker_ipfs <- Json.parse(worker_ipfs_str!)

                ws = WorkerSettings(worker_config = worker_config, worker_script = worker_script, worker_ipfs = worker_ipfs)
                settings <<- ws
                result <<- true
    <- settings, result!

-- Check if a worker for a deal is already created
func is_worker_created(spell_id: SpellId, deal_id: DealId) -> bool:
    result: *bool
    try:
        worker_id <- Worker.get_peer_id(deal_id)
        result <<- true
    otherwise:
        result <<- false
    <- result!