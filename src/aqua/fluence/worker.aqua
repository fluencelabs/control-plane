module Worker declares WorkerArgs, WorkerSettings, get_worker_settings, is_worker_created, create

import TriggerConfig, Spell from "@fluencelabs/spell/spell_service.aqua"
import PeerId from "@fluencelabs/aqua-lib/builtin.aqua"

import spell_log, deal_log, get_string from "../fluence/spell.aqua"
import Worker, Json, OpExt, JsonTriggerConfig from "../fluence/peer.aqua"
import DealId, SpellId, WorkerId from "../types.aqua"

-- Arguments of the worker
data WorkerArgs:
    -- Address of the deal is also an ID of the deal
    deal_id: DealId
    -- CID of the worker's definition
    worker_def_cid: string
    -- IPFS API where the related CID resides
    ipfs: string

-- Settings of the worker for the decider
data WorkerSettings:
    -- Trigger config of the worker
    config: TriggerConfig
    -- Worker's AIR script
    script: string
    -- IPFS API for the worker to pull info from
    ipfs: string

-- Parse worker-settings from the decider's KV
func get_worker_settings(spell_id: SpellId) ->  ?WorkerSettings:
    Spell spell_id

    settings: *WorkerSettings

    script_str <- get_string(spell_id, "worker_script")
    config_str <- get_string(spell_id, "worker_config")
    ipfs_str <- get_string(spell_id, "worker_ipfs")

    if script_str != nil:
        if config_str != nil:
            if ipfs_str != nil:
                script <- Json.parse(script_str!)
                config <- JsonTriggerConfig.parse(config_str!)
                ipfs <- Json.parse(ipfs_str!)

                ws = WorkerSettings(config = config, script = script, ipfs = ipfs)
                settings <<- ws
            else:
                spell_log(spell_id, "get_worker_settings: worker_ipfs is not set")
        else:
            spell_log(spell_id, "get_worker_settings: worker_config is not set")
    else:
        spell_log(spell_id, "get_worker_settings: worker_script is not set")

    <- settings

-- Check if a worker for a deal is already created
func is_worker_created(spell_id: SpellId, deal_id: DealId) -> bool:
    created: *bool
    try:
        worker_id <- Worker.get_peer_id(deal_id)
        created <<- true
    otherwise:
        created <<- false
    <- created!

func create(spell_id: SpellId, deal_id: DealId) -> ?WorkerId:
    worker_id: ?WorkerId
    try:
        worker_id <- Worker.create(deal_id)
        deal_log(spell_id, deal_id, ["created worker for deal", worker_id!])
    otherwise:
        -- if worker was already created, get its id
        worker_id <- Worker.get_peer_id(deal_id)

    if worker_id == nil:
        deal_log(spell_id, deal_id, "error creating worker")

    <- worker_id
