module Worker declares WorkerArgs, WorkerSettings, get_worker_settings, is_worker_created, create, remove

import TriggerConfig, Spell from "@fluencelabs/spell/spell_service.aqua"
import PeerId from "@fluencelabs/aqua-lib/builtin.aqua"
import Worker from "@fluencelabs/aqua-lib/workers.aqua"

import spell_log, deal_log, get_string from "../fluence/spell.aqua"
import Json, OpExt, JsonTriggerConfig from "../fluence/peer.aqua"
import DealId, SpellId, WorkerId from "../types.aqua"

-- Arguments of the worker
-- Names must be in sync with Worker Spell.
data WorkerArgs:
    -- Address of the deal is also an ID of the deal
    deal_id: DealId
    -- CID of the worker's definition.
    worker_def_cid: string
    -- IPFS API where the related CID resides
    ipfs: string

-- Settings of the worker for the decider
data WorkerSettings:
    -- Trigger config of the worker
    config: TriggerConfig
    -- Worker's AIR script
    script: string
    -- IPFS API for the worker to pull info from
    ipfs: string

service JsonWorkerSettings("json"):
    parse(str: string) -> WorkerSettings

-- Parse worker-settings from the decider's KV 
func get_worker_settings(spell_id: SpellId) ->  ?WorkerSettings:
    Spell spell_id

    settings: *WorkerSettings
    -- TODO: I want to unite these guys to one structure but it won't be backward-compatible. 
    settings_str <- get_string(spell_id, "worker_settings")
    if settings_str != nil:
        try:
            settings <<- JsonWorkerSettings.parse(settings_str!)
        catch e:
            spell_log(spell_id, ["can't parse worker_settings", e, " original string:", settings_str!])

    <- settings

-- Check if a worker for a deal is already created
func is_worker_created(spell_id: SpellId, deal_id: DealId) -> bool:
    created: *bool

    existing_worker <- Worker.get_worker_id(deal_id)
    if existing_worker != nil:
        created <<- true
    else:
        created <<- false

    <- created!

func create(spell_id: SpellId, deal_id: DealId) -> ?WorkerId:
    worker_id: *WorkerId

    existing_worker <- Worker.get_worker_id(deal_id)

    if existing_worker == nil:
        -- if worker was not created yet, create it
        try:
            worker_id <- Worker.create(deal_id)
            deal_log(spell_id, deal_id, ["created worker for deal", worker_id!])
        catch e:
            deal_log(spell_id, deal_id, ["error creating worker", e.message])
    else:
        -- if worker was already created, get its id
        worker_id <<- existing_worker!


    <- worker_id

func remove(host_id: PeerId, worker_id: WorkerId):
    spell_log("spell", ["will remove worker", worker_id, "from host", host_id])
    on host_id:
        Worker.remove(worker_id)
