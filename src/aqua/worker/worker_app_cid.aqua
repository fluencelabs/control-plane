aqua AppCid declares *

import Spell from "@fluencelabs/spell/spell_service.aqua"
import WorkerId, DealId from "../types.aqua"
import deal_log from "../fluence/spell.aqua"
import "../consts.aqua"
import Json from "../fluence/peer.aqua"

func update_app_cid(worker_id: WorkerId, deal_id: DealId, app_cid: string) -> ?bool:
    is_updated: *bool
    on worker_id:
        Spell "worker-spell"
        -- Get the old app cid to detect if it's updated
        old_cid <- Spell.get_string(WORKER_DEF_CID)

        -- We need a json string for the app cid because it's used as an argument to the spell function
        -- which all must be a json objects
        app_cid_str <- Json.stringify(app_cid)
        if old_cid.success && old_cid.value == app_cid_str:
            is_updated <<- false
        else:
            result <- Spell.set_string(WORKER_DEF_CID, app_cid_str)
            if !result.success:
                on HOST_PEER_ID:
                    deal_log(deal_id, ["Failed to update app_cid on worker", result.error])
            else:
                is_updated <<- true
    
    <- is_updated
