--
-- Decider creates Nox workers based on Chain state
--
-- Copyright (C) 2024 Fluence DAO
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as
-- published by the Free Software Foundation version 3 of the
-- License.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
--
aqua WorkerStatus declares *

import PeerSpell from "@fluencelabs/spell/api.aqua"
import CUID from "@fluencelabs/aqua-lib/workers.aqua"
import Spell, TriggerConfig from "@fluencelabs/spell/spell_service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

import deal_log, spell_log from "../fluence/spell.aqua"
import DealId, WorkerId, TxHash from "../types.aqua"
import ChainConnector from "../fluence/connector.aqua"
import Json from "../fluence/peer.aqua"

import TxInfo from "../storage/tx.aqua"
use "../storage/tx.aqua" as TxStorage
import "../consts.aqua"

func find_tx_info(txs: []TxInfo, hash: string) -> ?TxInfo:
    result: *TxInfo
    for tx <- txs:
        if tx.tx_hash == hash:
            result <<- tx
    <- result 

func fetch_register_status():
    hashes: *TxHash
    txs <- TxStorage.get_txs()
    for tx <- txs:
        hashes <<- tx.tx_hash
    if hashes.length != 0:
        spell_log(["Checking", hashes.length, "registration txs for status"])
        try:
            results <- ChainConnector.get_tx_receipts(hashes) 
            for result <- results:
                if !result.success:
                    spell_log(["Fail to fetch register status for txs, error:", result.error])
                else:
                    if result.status != TX_STATUS_PENDING:
                        receipt = result.receipt!
                        tx_info <- find_tx_info(txs, receipt.tx_hash)
                        deal_log(tx_info!.deal_id, ["Got worker registration status", result.status, receipt.tx_hash, receipt.block_number])
                        TxStorage.remove_tx(tx_info!.deal_id)
        catch e:
            spell_log(["Failed to fetch register status: ", e])
