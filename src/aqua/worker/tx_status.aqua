aqua WorkerStatus declares * 

import PeerSpell from "@fluencelabs/spell/api.aqua"
import CUID from "@fluencelabs/aqua-lib/workers.aqua"
import Spell, TriggerConfig from "@fluencelabs/spell/spell_service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

import deal_log, spell_log from "../fluence/spell.aqua"
import DealId, WorkerId from "../types.aqua"
import ChainConnector from "../fluence/connector.aqua"
import Json from "../fluence/peer.aqua"

import WorkerTxInfo, WorkerTxStatus from "../storage/tx.aqua"
use "../storage/tx.aqua" as TxStorage
use "../storage/failed.aqua" as FailedStorage
import "../consts.aqua"

func find_tx_info(txs: []WorkerTxInfo, hash: string) -> ?WorkerTxInfo:
    result: *WorkerTxInfo
    for tx <- txs:
        if tx.tx_hash == hash:
            result <<- tx
    <- result 

func fetch_register_status():
    txs <- TxStorage.get_txs()
    spell_log(["Checking", txs.length, "registration txs for status"])
    hashes: *string
    for tx <- txs:
        hashes <<- tx.tx_hash
    if hashes != nil:
        try:
            results <- ChainConnector.get_tx_receipts(hashes) 
            for result <- results:
                if !result.success:
                    spell_log(["Fail to fetch register status for a tx:", result.error])
                else:
                    if result.status != TX_STATUS_PENDING:
                        receipt = result.receipt!
                        tx_info <- find_tx_info(txs, receipt.tx_hash)
                        TxStorage.store_tx_status(WorkerTxStatus(tx_info = tx_info!, status = result.status))
                        TxStorage.remove_tx(tx_info!)
                        if result.status == TX_STATUS_FAILED:
                            err = ["Worker registration failed", receipt.tx_hash, receipt.block_number]
                            deal_log(tx_info!.deal_id, err)
                            msg <- Json.stringify(err)
                            FailedStorage.store_failed(tx_info!.deal_id, msg)
                        else:
                            deal_log(tx_info!.deal_id, ["Worker registration succeeded", receipt.tx_hash, receipt.block_number])
        catch e:
            spell_log(["Failed to fetch register status: ", e])