module RemoveWorker declares remove
export remove, inspect, joined_deals, get_logs, test_join, test

import Worker from "@fluencelabs/aqua-lib/workers.aqua"
import Srv, Op from "@fluencelabs/aqua-lib/builtin.aqua"
import Spell, StringListValue from "@fluencelabs/spell/spell_service.aqua"

import getWorkersInfo, GetWorkersInfoHostsDeciderInstallationSpells from "workers.aqua"
import Json from "fluence/peer.aqua"
use "debug.aqua" as Debug
use "decider/deal_storage.aqua" as DealStorage

func spells() -> []GetWorkersInfoHostsDeciderInstallationSpells:
    info <- getWorkersInfo()
    decider = info.hosts.decider!
    <- decider.installationSpells

func remove() -> string:
    for spell <- spells():
        on spell.hostId:
            Worker.remove(spell.workerId)
    <- "OK"

func joined_deals() -> string:
    for spell <- spells():
        on spell.workerId via spell.hostId:
            joined <- DealStorage.get_joined_deals("decider")
            Debug.log_back(joined)
    <- "OK"

-- func remove_all() -> string:
--     for spell <- spells():
--         on spell.workerId via spell.hostId:
--             spell_id = "decider"
--             joined <- DealStorage.get_joined_deals(spell_id)
--             for deal <- joined:
--                 on spell.hostId:
--                     Worker.remove(deal.worker_id)

--     <- "OK"

func inspect() -> string:
    for spell <- spells():
        on spell.workerId via spell.hostId:
            list <- Srv.list()
            Debug.log_back(list)
    <- "OK"

func get_logs() -> [][]string:
    all_logs: *[]string

    info <- getWorkersInfo()
    on info.hosts.decider!.relayId:
        for spell <- info.hosts.decider!.installationSpells:
            on spell.workerId via spell.hostId:
                Spell spell.spellId -- or Spell "spell"
                logs <- Spell.list_get_strings("logs")
                all_logs <<- logs.strings

    <- all_logs

func get_logs_slow() -> []string:
    all_logs: *[]string

    info <- getWorkersInfo()
    on info.hosts.decider!.relayId:
        for spell <- info.hosts.decider!.installationSpells:
            on spell.workerId via spell.hostId:
                Spell spell.spellId -- or Spell "spell"
                logs <- Spell.list_get_strings("logs")
                all_logs <<- logs.strings

    Debug.Console.print("i'm back")
    parsed: *string
    for logs <- all_logs par:
        for log <- logs par:
            -- Debug.Console.print("will parse")
            Debug.Console.print(["parsed", parsed.length])
            parsed <<- log

    join parsed[2]
    <- parsed


func test_join() -> []string:
    result: *string
    all_input: *[]string

    on HOST_PEER_ID:
        input = Op.identity(["[1]","[2]","[3]","[4]","[5]","[6]","[7]","[8]","[9]","[10]","[11]","[12]","[13]","[14]","[15]","[16]","[17]","[18]","[19]","[20]","[21]"])
        all_input <<- input

    for inp <- all_input par:
        for i <- inp par:
            result <<- Json.parse(i)
            Debug.Console.print("parsed")
    join result[10]

    <- result

func test() -> ??string:
    a: ??string
    info <- getWorkersInfo()
    on info.hosts.decider!.relayId:
        a <<- Op.identity(?["wtf"])
    <- a